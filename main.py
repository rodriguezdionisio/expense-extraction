#!/usr/bin/env python3
"""
Script principal para orquestar la extracci√≥n y procesamiento de datos de Fudo.

Este script ejecuta:
1. Extracci√≥n de datos raw en formato JSON (por p√°gina o por fecha)
2. Procesamiento y aplanado de JSON a CSV
"""

import sys
from pathlib import Path
from utils.logger import get_logger

# Importar nuestros m√≥dulos
from src.extract_expenses import FudoRawExtractor
from src.process_expenses import FudoDataProcessor

logger = get_logger(__name__)

def run_extraction_by_date(start_date=None, end_date=None, partition_by="month"):
    """Ejecuta solo la extracci√≥n por fecha."""
    try:
        print(f"üîÑ EJECUTANDO EXTRACCI√ìN POR FECHA ({partition_by.upper()})")
        print("="*60)
        print(f"üìÖ Per√≠odo: {start_date or 'inicio'} a {end_date or 'fin'}")
        print(f"üìÇ Partici√≥n: {partition_by}")
        print()
        
        # EXTRACCI√ìN
        extractor = FudoRawExtractor()
        extractor.get_token()
        
        result = extractor.extract_expenses_by_date(
            start_date=start_date,
            end_date=end_date,
            partition_by=partition_by
        )
        
        # RESUMEN
        print()
        print("="*60)
        print("RESUMEN DE EXTRACCI√ìN POR FECHA COMPLETADA")
        print("="*60)
        print(f"üìä Total registros: {result['summary']['total_records']}")
        print(f"üìÅ Particiones creadas: {result['summary']['partitions_created']}")
        print(f"üóÇÔ∏è Archivos generados: {result['summary']['files_created']}")
        print(f"üìÇ Directorio: raw_data/expenses_by_date/")
        print("="*60)
        
        return result
        
    except Exception as e:
        logger.critical(f"Error en la extracci√≥n por fecha: {e}")
        raise

def run_processing_only():
    """Ejecuta solo el procesamiento de datos JSON existentes."""
    try:
        print("üîÑ EJECUTANDO SOLO PROCESAMIENTO")
        print("="*60)
        
        processor = FudoDataProcessor()
        results = processor.process_all()
        
        print()
        print("="*60)
        print("RESUMEN DE PROCESAMIENTO COMPLETADO")
        print("="*60)
        
        if results['expenses'] is not None:
            print(f"‚úÖ EXPENSES: {len(results['expenses'])} registros procesados")
        
        print(f"üìÅ Archivos CSV guardados en: processed_data")
        print("="*60)
        print("‚úÖ Procesamiento completado")
        
        return results
        
    except Exception as e:
        logger.critical(f"Error en el procesamiento: {e}")
        raise

def main():
    """Funci√≥n principal con opciones de l√≠nea de comandos."""
    import argparse
    
    parser = argparse.ArgumentParser(description='Pipeline de extracci√≥n de datos Fudo por fecha')
    parser.add_argument('--mode', choices=['extract-by-date', 'process'], 
                       default='extract-by-date', help='Modo de ejecuci√≥n')
    parser.add_argument('--start-date', type=str,
                       help='Fecha de inicio (YYYY-MM-DD). Si no se especifica, extrae todos los datos')
    parser.add_argument('--end-date', type=str,
                       help='Fecha de fin (YYYY-MM-DD). Si no se especifica, extrae hasta el final')
    parser.add_argument('--partition-by', 
                       choices=['day', 'month', 'year'],
                       default='day',
                       help='Criterio de partici√≥n. Recomendado: day para m√°xima granularidad, month para data lake')
    
    args = parser.parse_args()
    
    try:
        if args.mode == 'extract-by-date':
            return run_extraction_by_date(
                start_date=args.start_date,
                end_date=args.end_date,
                partition_by=args.partition_by
            )
        
        elif args.mode == 'process':
            return run_processing_only()
            
    except KeyboardInterrupt:
        print("‚ö†Ô∏è  Proceso interrumpido por el usuario")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Error fatal: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
